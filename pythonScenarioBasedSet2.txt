Scenario: You are developing a banking application that categorizes transactions based on the amount entered.
 Write logic to determine whether the amount is positive, negative, or zero.
    Get the amount as input from user
    If number is greater than 0, display transaction is positive
    Else if number is smaller than 0, display transaction is negative
    Else display no transaction

Scenario: A digital locker requires users to enter a numerical passcode. As part of a security feature, the system checks the sum of the digits of the passcode.
 Write logic to compute the sum of the digits of a given number.
    Get a numeric passcode as input from user
    Covert the number into individual digits
    Initial sum variable to zero
    Add each digit to sum and calculate the total sum
    Display the total sum

Scenario: A mobile payment app uses a simple checksum validation where reversing a transaction ID helps detect fraud.
 Write logic to take a number and return its reverse.
    Read the numeric transaction id
    Convert it into string
    Reverse the string
    Covert it into numeric
    Display the reversed numeric value

Scenario: In a secure login system, certain features are enabled only for users with prime-numbered user IDs.
 Write logic to check if a given number is prime.
    Read the input number
    If the number is less than 2 print 'not a prime number'
    Loop from 2 to the square root of the number
    If the number is divisible by any of the range values, print 'not a prime number'
    If no divisors found then print 'a prime number'

Scenario: A scientist is working on permutations and needs to calculate the factorial of numbers frequently.
 Write logic to find the factorial of a given number using recursion.
    Get a numeric value as input from user
    If number is 0 or 1, retuirn 1
    Else calculate value as number multiplied by factorial of number minus 1
    Print the result

Scenario: A unique lottery system assigns ticket numbers where only Armstrong numbers win the jackpot.
 Write logic to check whether a given number is an Armstrong number.
    Get a numeric input from user
    Count the number of digits
    Initialize sum variable to zero
    For each digit in number, raise the digit to the power of total count
    Add the values to sum variable
    If total sum is aqual to the number, then print 'Armstrong number'
    Else not an Armstrong number
    
Scenario: A password manager needs to strengthen weak passwords by swapping the first and last characters of user-generated passwords.
 Write logic to perform this operation on a given string.
    Get a string input from user
    If the length of string is less than 2, print the string as it is
    Else swap the first and last char alone, print the result string

Scenario: A low-level networking application requires decimal numbers to be converted into binary format before transmission.
 Write logic to convert a given decimal number into its binary equivalent.
    Get a decimal number as input from user
    Initialize empty string for binary representation
    While number is greater than zero
    Divide the number by 2 and store the remainder
    Add the remainder to binary string
    Update the number by dividing it by 2
    Reverse the binary string
    Print the binary representation

Scenario: A text-processing tool helps summarize articles by identifying the most significant words.
 Write logic to find the longest word in a sentence.
    Get a sentence as input from user
    Split the sentence into individual words
    Initialize a variable to store the longest word
    Loop through each word
    If current word is longer than stored longest word, update the longest word
    Print the longest word

Scenario: A plagiarism detection tool compares words from different documents and checks if they are anagrams (same characters but different order).
 Write logic to check whether two given strings are anagrams.
    Get two strings as input from user
    Remove the spaces and convert both strings to lower case
    Sort the characters of both string
    Compare the sorted strings
    If the sorted strings are matching, print 'strings are an anagram'
    Else strings "are not an anagram"
